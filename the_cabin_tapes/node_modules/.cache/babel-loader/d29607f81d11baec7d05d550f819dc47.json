{"ast":null,"code":"import { evaluateBoundary } from './evaluate.js';\n\nconst cloneDeep = require('lodash/cloneDeep');\n\nexport class Triangle {\n  constructor(coordinates) {\n    const [ax, ay, bx, by, cx, cy] = coordinates;\n    this.a = {\n      x: ax,\n      y: ay\n    };\n    this.b = {\n      x: bx,\n      y: by\n    };\n    this.c = {\n      x: cx,\n      y: cy\n    };\n    this.completed = false;\n  }\n\n  translate(tx, ty) {\n    this.a.x = this.a.x + tx;\n    this.a.y = this.a.y + ty;\n    this.b.x = this.b.x + tx;\n    this.b.y = this.b.y + ty;\n    this.c.x = this.c.x + tx;\n    this.c.y = this.c.y + ty;\n  }\n\n  rotate(degrees, px = 0, py = 0) {\n    const ax = this.a.x;\n    const ay = this.a.y;\n    const bx = this.b.x;\n    const by = this.b.y;\n    const cx = this.c.x;\n    const cy = this.c.y;\n    const theta = Math.PI / 180 * degrees;\n    this.a.x = Math.round((ax - px) * Math.cos(theta) + (ay - py) * Math.sin(theta) + px);\n    this.a.y = Math.round((ay - py) * Math.cos(theta) - (ax - px) * Math.sin(theta) + py);\n    this.b.x = Math.round((bx - px) * Math.cos(theta) + (by - py) * Math.sin(theta) + px);\n    this.b.y = Math.round((by - py) * Math.cos(theta) - (bx - px) * Math.sin(theta) + py);\n    this.c.x = Math.round((cx - px) * Math.cos(theta) + (cy - py) * Math.sin(theta) + px);\n    this.c.y = Math.round((cy - py) * Math.cos(theta) - (cx - px) * Math.sin(theta) + py);\n  }\n\n  reflect(axis) {\n    if (axis === \"x\") {\n      this.a.y = this.a.y * -1;\n      this.b.y = this.b.y * -1;\n      this.c.y = this.c.y * -1;\n    } else {\n      this.a.x = this.a.x * -1;\n      this.b.x = this.b.x * -1;\n      this.c.x = this.c.x * -1;\n    }\n  }\n\n  randomizeLocation() {\n    const transformations = [{\n      method: \"rotate\",\n      params: 90\n    }, {\n      method: \"rotate\",\n      params: -90\n    }, {\n      method: \"reflect\",\n      params: \"x\"\n    }, {\n      method: \"reflect\",\n      params: \"y\"\n    }, {\n      method: \"rotate\",\n      params: 0\n    }];\n\n    do {\n      var clone = cloneDeep(this);\n      const trans = transformations[Math.floor(Math.random() * 5)];\n      console.log(trans);\n      clone[trans.method](trans.params); //Commented out for easier matching\n      //clone.translate(Math.round((Math.random() - 0.5) * 6), Math.round((Math.random() - 0.5) * 6));\n\n      console.log(clone.a, clone.b, clone.c);\n    } while (evaluateBoundary(clone));\n\n    this.a = clone.a;\n    this.b = clone.b;\n    this.c = clone.c;\n  }\n\n}","map":{"version":3,"sources":["/media/sj/Data/code/TransformationGame/the_cabin_tapes/src/components/Game/Triangle.js"],"names":["evaluateBoundary","cloneDeep","require","Triangle","constructor","coordinates","ax","ay","bx","by","cx","cy","a","x","y","b","c","completed","translate","tx","ty","rotate","degrees","px","py","theta","Math","PI","round","cos","sin","reflect","axis","randomizeLocation","transformations","method","params","clone","trans","floor","random","console","log"],"mappings":"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","sourcesContent":["import { evaluateBoundary } from './evaluate.js'\nconst cloneDeep = require('lodash/cloneDeep');\n\nexport class Triangle {\n    constructor(coordinates) {\n        const [ax, ay, bx, by, cx, cy] = coordinates;\n\n        this.a = { x: ax, y: ay };\n        this.b = { x: bx, y: by };\n        this.c = { x: cx, y: cy };\n        this.completed = false;\n    }\n\n    translate(tx, ty) {\n        this.a.x = this.a.x + tx;\n        this.a.y = this.a.y + ty;\n        this.b.x = this.b.x + tx;\n        this.b.y = this.b.y + ty;\n        this.c.x = this.c.x + tx;\n        this.c.y = this.c.y + ty;\n    }\n\n    rotate(degrees, px = 0, py = 0) {\n        const ax = this.a.x;\n        const ay = this.a.y;\n        const bx = this.b.x;\n        const by = this.b.y;\n        const cx = this.c.x;\n        const cy = this.c.y;\n\n        const theta = (Math.PI / 180) * degrees;\n\n        this.a.x = Math.round(((ax - px) * Math.cos(theta)) + ((ay - py) * Math.sin(theta)) + px);\n        this.a.y = Math.round(((ay - py) * Math.cos(theta)) - ((ax - px) * Math.sin(theta)) + py);\n        this.b.x = Math.round(((bx - px) * Math.cos(theta)) + ((by - py) * Math.sin(theta)) + px);\n        this.b.y = Math.round(((by - py) * Math.cos(theta)) - ((bx - px) * Math.sin(theta)) + py);\n        this.c.x = Math.round(((cx - px) * Math.cos(theta)) + ((cy - py) * Math.sin(theta)) + px);\n        this.c.y = Math.round(((cy - py) * Math.cos(theta)) - ((cx - px) * Math.sin(theta)) + py);\n    }\n\n    reflect(axis) {\n        if (axis === \"x\") {\n            this.a.y = this.a.y * -1;\n            this.b.y = this.b.y * -1;\n            this.c.y = this.c.y * -1;\n        } else {\n            this.a.x = this.a.x * -1;\n            this.b.x = this.b.x * -1;\n            this.c.x = this.c.x * -1;\n        }\n    }\n\n    randomizeLocation() {\n        const transformations = [\n            { method: \"rotate\", params: 90 },\n            { method: \"rotate\", params: -90 },\n            { method: \"reflect\", params: \"x\" },\n            { method: \"reflect\", params: \"y\" },\n            { method: \"rotate\", params: 0 }];\n\n        do {\n            var clone = cloneDeep(this);\n            const trans = transformations[Math.floor(Math.random() * 5)];\n            console.log(trans)\n\n            clone[trans.method](trans.params);\n\n            //Commented out for easier matching\n            //clone.translate(Math.round((Math.random() - 0.5) * 6), Math.round((Math.random() - 0.5) * 6));\n            console.log(clone.a, clone.b, clone.c);\n        } while (evaluateBoundary(clone));\n        this.a = clone.a;\n        this.b = clone.b;\n        this.c = clone.c;\n    }\n}"]},"metadata":{},"sourceType":"module"}