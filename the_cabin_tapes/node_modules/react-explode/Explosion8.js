"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _expoOut = require("eases/expo-out");

var _expoOut2 = _interopRequireDefault(_expoOut);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Explosion = function (_Component) {
    _inherits(Explosion, _Component);

    function Explosion() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Explosion);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Explosion.__proto__ || Object.getPrototypeOf(Explosion)).call.apply(_ref, [this].concat(args))), _this), _this.center = _this.props.size / 2, _this.size = _this.props.size, _this.onStart = _this.props.onStart, _this.onComplete = _this.props.onComplete, _this.onRepeat = _this.props.onRepeat, _this.sycle = 0, _this.start = 0, _this.dest = 47.5, _this.amplitude = 1.25, _this.waveLength = 6000, _this.strokeWidth = 0.5, _this.root = {
            start: null,
            end: null,
            duration: 1100,
            step: 0,
            delay: 0,
            finished: false
        }, _this.edge = {
            start: null,
            end: null,
            duration: 1100,
            step: 0,
            delay: 80,
            finished: false
        }, _this.update = function (side, timestamp) {
            var delay = side.delay,
                start = side.start,
                end = side.end;


            if (!start) side.start = timestamp;
            if (!end) side.end = side.start - side.duration;

            var elapsed = timestamp - side.start;

            if (elapsed >= delay) {
                side.start += delay;
                side.delay = 0;

                elapsed = timestamp - side.start;

                var percent = elapsed / side.duration;
                var time = (0, _expoOut2.default)(percent);

                if (elapsed < side.duration) {
                    side.step = Math.round(_this.size * _this.dest / 100 * time);
                    side.finished = false;
                } else side.finished = true;
            }
        }, _this.updateStart = function (timestamp) {
            _this.update(_this.root, timestamp);
        }, _this.updateEnd = function (timestamp) {
            _this.update(_this.edge, timestamp);
        }, _this.animate = function (timestamp) {
            if (!_this.curve) return null;

            var isFinished = _this.root.finished && _this.edge.finished;

            if (_this.sycle === 0 && _this.onStart) _this.onStart();

            if (isFinished && _this.props.repeat <= _this.sycle) {
                _this.onComplete && _this.onComplete();
                return;
            }
            if (isFinished) {
                if (!_this.start) _this.start = timestamp;

                var elapsed = timestamp - _this.start;

                if (elapsed >= _this.props.repeatDelay * 1000) {
                    _this.onRepeat && _this.onRepeat();
                    _this.root.start = null;
                    _this.edge.start = null;
                    _this.edge.delay = 80;
                    _this.start = null;
                    _this.sycle += 1;
                }
            }

            _this.drawCurves();
            _this.updateStart(timestamp);
            _this.updateEnd(timestamp);

            requestAnimationFrame(_this.animate);
        }, _this.drawCurves = function () {
            var waveLength = _this.waveLength / _this.size * Math.PI / 180;
            var degree = 45 * Math.PI / 180;
            var path = [];

            var start = _this.root.step;
            var end = _this.edge.step;

            var amplitude = _this.size * _this.amplitude / 100;

            for (var i = 0; i < 8; i++) {
                for (var j = end; j < start; j++) {
                    var x = _this.center + j * Math.cos(degree * i) - amplitude * Math.sin(degree * i) * Math.sin(j * waveLength);
                    var y = _this.center + j * Math.sin(degree * i) + amplitude * Math.cos(degree * i) * Math.sin(j * waveLength);

                    j === end && path.push({ type: "M", values: [x, y] });
                    j > end && path.push({ type: "L", values: [x, y] });
                }

                var data = _this.createPathData(path);
                _this.curve.setAttribute("d", data);
            }
        }, _this.createPathData = function (data) {
            return data.reduce(function (string, _ref2) {
                var type = _ref2.type,
                    values = _ref2.values;

                return string + ("" + type + values[0] + " " + values[1] + " ");
            }, "");
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Explosion, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            requestAnimationFrame(this.animate);
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                size = _props.size,
                style = _props.style;

            var strokeWidth = Math.ceil(size * this.strokeWidth / 100);

            return _react2.default.createElement(
                "svg",
                { width: this.size, height: this.size, style: style },
                _react2.default.createElement("path", { stroke: "white", fill: "none", strokeWidth: strokeWidth, ref: function ref(el) {
                        return _this2.curve = el;
                    } })
            );
        }
    }]);

    return Explosion;
}(_react.Component);

exports.default = Explosion;
