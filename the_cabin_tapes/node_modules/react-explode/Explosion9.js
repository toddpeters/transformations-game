"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _gsap = require("gsap");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Explosion = function (_Component) {
    _inherits(Explosion, _Component);

    function Explosion() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Explosion);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Explosion.__proto__ || Object.getPrototypeOf(Explosion)).call.apply(_ref, [this].concat(args))), _this), _this.lines = [], _this.squares = [], _this.circles = [], _this.squareSize = 25, _this.strokeWidth = 0.7, _this.dists = [47.4, 35, 42.5], _this.circleRadius = 3.5, _this.diff = 7.5, _this.lineColors = ["rgb(1, 204, 245)", "rgb(102, 1, 245)", "white"], _this.count = 10, _this.size = _this.props.size, _this.center = _this.size / 2, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Explosion, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this2 = this;

            var dists = this.dists.map(function (dist) {
                return _this2.size * dist / 100;
            });
            var diff = this.size * this.diff / 100;

            var tlgroup1 = [];
            var tlgroup2 = [];

            var angle = Math.PI / 5;
            var ease = _gsap.Power4.easeOut;

            var offsetX = Math.cos(Math.PI / 10);
            var offsetY = Math.sin(Math.PI / 10);

            var transformOrigin = "50% 50%";

            for (var i = 0; i < this.lines.length; i++) {
                var timeline = new _gsap.TimelineMax({ delay: Math.floor(i / this.count) * 0.2 });
                var line = this.lines[i];

                var x = Math.cos(i * angle);
                var y = Math.sin(i * angle);

                var space = (Math.floor(i / this.count) + 1) * diff;

                var linex = this.center + offsetX + (dists[0] - space) * x;
                var liney = this.center + offsetY + (dists[0] - space) * y;

                var start = { x2: linex, y2: liney };
                var end = { x1: linex, y1: liney };

                timeline.to(line, 0.7, { attr: start, ease: ease });
                timeline.to(line, 1.3, { attr: end, ease: ease }, "-=0.7");
                timeline.to(line, 0.5, { opacity: 0 }, "-=0.5");

                tlgroup1.push(timeline);
                if (i < this.count) {
                    var _timeline = new _gsap.TimelineMax();

                    var square = this.squares[i];
                    var circle = this.circles[i];

                    // animate square
                    _timeline.fromTo(square, 1.5, { rotation: i * 35, transformOrigin: transformOrigin }, { rotation: "+=360", ease: ease });
                    _timeline.add("start", "-=1.5");
                    _timeline.to(square, 1.5, { x: offsetX + dists[1] * x, y: offsetY + dists[1] * y, ease: ease }, "start");
                    _timeline.from(square, 1.5, { scale: 0, ease: ease }, "start");
                    _timeline.to(square, 1, { opacity: 0, ease: ease }, "start+=0.8");

                    // animate circle
                    _timeline.to(circle, 1.5, { x: offsetX + dists[2] * x, y: offsetY + dists[2] * y, ease: ease }, "start+=0.3");
                    _timeline.from(circle, 1.5, { scale: 0, transformOrigin: transformOrigin, ease: ease }, "start+=0.3");
                    _timeline.to(circle, 1.5, { scale: 0, transformOrigin: transformOrigin, ease: ease }, "-=0.9");

                    tlgroup2.push(_timeline);
                }
            }

            var _props = this.props,
                _props$repeat = _props.repeat,
                repeat = _props$repeat === undefined ? 0 : _props$repeat,
                _props$repeatDelay = _props.repeatDelay,
                repeatDelay = _props$repeatDelay === undefined ? 0 : _props$repeatDelay,
                _props$delay = _props.delay,
                delay = _props$delay === undefined ? 0 : _props$delay,
                onStart = _props.onStart,
                onComplete = _props.onComplete,
                onRepeat = _props.onRepeat;

            var tl = new _gsap.TimelineMax({ repeat: repeat, repeatDelay: repeatDelay, delay: delay, onStart: onStart, onComplete: onComplete, onRepeat: onRepeat });

            tl.add(tlgroup1, 0);
            tl.add(tlgroup2, 0);
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            var _props2 = this.props,
                size = _props2.size,
                style = _props2.style;

            var center = this.center;

            return _react2.default.createElement(
                "svg",
                { width: size, height: size, style: style },
                _react2.default.createElement(
                    _react.Fragment,
                    null,
                    [].concat(_toConsumableArray(Array(this.count * 3))).map(function (_, i) {
                        return _react2.default.createElement(
                            _react.Fragment,
                            { key: i },
                            _react2.default.createElement("line", {
                                x1: center,
                                y1: center,
                                x2: center,
                                y2: center,
                                ref: function ref(el) {
                                    return _this3.lines[i] = el;
                                },
                                key: i,
                                strokeLinecap: "round",
                                strokeWidth: Math.ceil(_this3.size * (_this3.strokeWidth * 2) / 100),
                                stroke: _this3.lineColors[Math.floor(i / _this3.count)]
                            }),
                            i < _this3.count && _react2.default.createElement(
                                _react.Fragment,
                                null,
                                _react2.default.createElement("rect", {
                                    x: center - _this3.size * _this3.squareSize / 100 / 2,
                                    y: center - _this3.size * _this3.squareSize / 100 / 2,
                                    width: _this3.size * _this3.squareSize / 100,
                                    height: _this3.size * _this3.squareSize / 100,
                                    ref: function ref(el) {
                                        return _this3.squares[i] = el;
                                    },
                                    stroke: "rgb(255, 208, 3)",
                                    strokeWidth: Math.ceil(_this3.size * _this3.strokeWidth / 100),
                                    fill: "none"
                                }),
                                _react2.default.createElement("circle", {
                                    cx: center,
                                    cy: center,
                                    r: _this3.size * _this3.circleRadius / 100,
                                    ref: function ref(el) {
                                        return _this3.circles[i] = el;
                                    },
                                    stroke: "white",
                                    strokeWidth: Math.ceil(_this3.size * _this3.strokeWidth / 100),
                                    fill: "none"
                                })
                            )
                        );
                    })
                )
            );
        }
    }]);

    return Explosion;
}(_react.Component);

exports.default = Explosion;
