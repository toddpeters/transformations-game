"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _gsap = require("gsap");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Explosion = function (_Component) {
    _inherits(Explosion, _Component);

    function Explosion(props) {
        _classCallCheck(this, Explosion);

        var _this = _possibleConstructorReturn(this, (Explosion.__proto__ || Object.getPrototypeOf(Explosion)).call(this, props));

        _this.explode = function () {
            var ease = _gsap.Power4.easeOut;
            var _this$state = _this.state,
                size = _this$state.size,
                delay = _this$state.delay,
                repeat = _this$state.repeat,
                repeatDelay = _this$state.repeatDelay;
            var _this$props = _this.props,
                onStart = _this$props.onStart,
                onComplete = _this$props.onComplete,
                onRepeat = _this$props.onRepeat;

            var center = size / 2;
            var sizes = [size * 0.58, size * 0.3, size * 0.3, size * 0.1, size * 0.1];
            var halfs = [sizes[0] / 2, sizes[1] / 2, sizes[3] / 2];
            var front = center - halfs[0];
            var back = center + halfs[0];
            var positions = {
                start: [{ x: center, y: center }, { x: center, y: back }, { x: center, y: front }, { x: front, y: front }, { x: back, y: back }],
                end: [{ x: front, y: front }, { x: center - halfs[1], y: back - halfs[1] }, { x: center - halfs[1], y: front - halfs[1] }, { x: front - halfs[2], y: front - halfs[2] }, { x: back - halfs[2], y: back - halfs[2] }]
            };
            var timelines = [];

            var delays = [0, 0.3, 0.3, 0.5, 0.5];
            var strokeWidth = Math.ceil(size * _this.strokeWidth / 100);

            for (var i = 0; i < _this.squares.length; i++) {
                var square = _this.squares[i];
                var _size = sizes[i];
                var start = positions.start[i];
                var end = positions.end[i];
                var _delay = delays[i];
                var timeline = new _gsap.TimelineMax({
                    delay: _delay,
                    onStart: i === 0 && onStart,
                    onComplete: i === 0 && onComplete,
                    onRepeat: i === 0 && onRepeat
                });

                timeline.fromTo(square, 1, { attr: { x: start.x, y: start.y, width: 0, height: 0 }, ease: ease }, { attr: { x: end.x, y: end.y, width: _size, height: _size }, ease: ease }).fromTo(square, 1, { attr: { "stroke-width": strokeWidth }, ease: ease }, { attr: { "stroke-width": 0 }, ease: ease }, "-=0.9");

                timelines.push(timeline);
            }

            _this.timeline = new _gsap.TimelineMax({ delay: delay, repeat: repeat, repeatDelay: repeatDelay });
            _this.timeline.add(timelines);
        };

        _this.state = { size: 400, delay: 0, repeatDelay: 0, repeat: 0 };

        _this.timeline = null;
        _this.squares = [];
        _this.strokeWidth = 2.5;
        return _this;
    }

    _createClass(Explosion, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(_ref) {
            var size = _ref.size,
                delay = _ref.delay,
                repeatDelay = _ref.repeatDelay,
                repeat = _ref.repeat;

            var state = this.state;

            return size !== state.size || delay !== state.delay || repeatDelay !== state.repeatDelay || repeat !== state.repeat;
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            this.explode();
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            this.timeline.kill();
            this.explode();
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var size = this.state.size;
            var style = this.props.style;
            var center = size / 2;
            var sizes = [size * 0.58, size * 0.3, size * 0.3, size * 0.1, size * 0.1];
            var halfs = [sizes[0] / 2, sizes[1] / 2, sizes[3] / 2];
            var front = center - halfs[0];
            var back = center + halfs[0];
            var strokeWidth = Math.ceil(size * this.strokeWidth / 100);
            var positions = [{ x: center, y: center }, { x: center, y: back }, { x: center, y: front }, { x: front, y: front }, { x: back, y: back }];

            return _react2.default.createElement(
                "svg",
                { width: size, height: size, style: style },
                [].concat(_toConsumableArray(Array(5))).map(function (_, i) {
                    var _positions$i = positions[i],
                        x = _positions$i.x,
                        y = _positions$i.y;


                    return _react2.default.createElement("rect", {
                        key: i,
                        x: x,
                        y: y,
                        width: 0,
                        height: 0,
                        stroke: "white",
                        strokeWidth: strokeWidth,
                        fill: "none",
                        ref: function ref(el) {
                            return _this2.squares[i] = el;
                        },
                        style: { transform: "rotate(-50deg)", transformOrigin: center + "px " + center + "px" }
                    });
                })
            );
        }
    }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(_ref2, prevState) {
            var size = _ref2.size,
                delay = _ref2.delay,
                repeatDelay = _ref2.repeatDelay,
                repeat = _ref2.repeat;

            if (size !== prevState.size || delay !== prevState.delay || repeatDelay !== prevState.repeatDelay || repeat !== prevState.repeat) return { size: size, delay: delay, repeatDelay: repeatDelay, repeat: repeat };

            return null;
        }
    }]);

    return Explosion;
}(_react.Component);

exports.default = Explosion;
