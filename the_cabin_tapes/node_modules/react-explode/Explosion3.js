"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _gsap = require("gsap");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Explosion = function (_Component) {
    _inherits(Explosion, _Component);

    function Explosion() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Explosion);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Explosion.__proto__ || Object.getPrototypeOf(Explosion)).call.apply(_ref, [this].concat(args))), _this), _this.state = { size: 400, delay: 0, repeatDelay: 0, repeat: 0 }, _this.targets = [[]], _this.size = _this.props.size, _this.center = _this.size / 2, _this.radiuses = [47.4, 24], _this.circleStrokeWidth = 2, _this.lineStrokeWidth = 1, _this.count = 16, _this.explode = function () {
            var _this$state = _this.state,
                size = _this$state.size,
                delay = _this$state.delay,
                repeat = _this$state.repeat,
                repeatDelay = _this$state.repeatDelay;
            var _this$props = _this.props,
                onStart = _this$props.onStart,
                onComplete = _this$props.onComplete,
                onRepeat = _this$props.onRepeat;

            var angle = Math.PI / (_this.count / 2);
            var ease = _gsap.Power4.easeOut;
            var radiuses = _this.radiuses.map(function (radius) {
                return size * radius / 100;
            });
            var center = size / 2;
            var timeline = new _gsap.TimelineMax({
                delay: 0.35,
                onComplete: onComplete && onComplete.bind(null, 2),
                onStart: onStart && onStart.bind(null, 2),
                onRepeat: onRepeat && onRepeat.bind(null, 2)
            });
            var timelines = [];
            var circleStrokeWidth = Math.ceil(size * _this.circleStrokeWidth / 100);

            for (var i = 0; i < 2; i++) {
                for (var j = 0; j < _this.count; j++) {
                    var isLast = j >= _this.count - 1;

                    var _timeline = new _gsap.TimelineMax({
                        delay: i * 0.5,
                        onComplete: onComplete && isLast && onComplete.bind(null, i),
                        onStart: onStart && isLast && onStart.bind(null, i),
                        onRepeat: onRepeat && isLast && onRepeat.bind(null, i)
                    });

                    var x = center + radiuses[0] * Math.cos(j * angle);
                    var y = center + radiuses[0] * Math.sin(j * angle);

                    var target = _this.targets[i][j];

                    var start = { x2: x, y2: y };
                    var end = { x1: x, y1: y };

                    _timeline.fromTo(target, 1, { attr: { x2: center, y2: center } }, { attr: start, ease: ease }).fromTo(target, 1, { attr: { x1: center, y1: center } }, { attr: end, ease: ease }, "-=0.9");

                    timelines.push(_timeline);
                }
            }

            timeline.fromTo(_this.circle, 1, { attr: { r: 0 } }, { attr: { r: radiuses[1] }, ease: ease }).fromTo(_this.circle, 1, { attr: { "stroke-width": circleStrokeWidth } }, { attr: { "stroke-width": 0 }, ease: ease }, "-=0.9");

            timelines.push(timeline);

            _this.timeline = new _gsap.TimelineMax({ delay: delay, repeat: repeat, repeatDelay: repeatDelay });
            _this.timeline.add(timelines);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Explosion, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(_ref2) {
            var size = _ref2.size,
                delay = _ref2.delay,
                repeatDelay = _ref2.repeatDelay,
                repeat = _ref2.repeat;

            var state = this.state;

            return size !== state.size || delay !== state.delay || repeatDelay !== state.repeatDelay || repeat !== state.repeat;
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            this.explode();
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            this.timeline.kill();
            this.explode();
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var size = this.state.size;
            var center = size / 2;
            var _props = this.props,
                style = _props.style,
                _props$color = _props.color,
                color = _props$color === undefined ? "white" : _props$color;


            var circleStrokeWidth = Math.ceil(size * this.circleStrokeWidth / 100);
            var lineStrokeWidth = Math.ceil(size * this.lineStrokeWidth / 100);

            return _react2.default.createElement(
                "svg",
                { style: style, width: size, height: size },
                _react2.default.createElement(
                    _react.Fragment,
                    null,
                    [].concat(_toConsumableArray(Array(2))).map(function (_, i) {
                        _this2.targets[i] = [];

                        return _react2.default.createElement(
                            _react.Fragment,
                            { key: i },
                            [].concat(_toConsumableArray(Array(_this2.count))).map(function (_, j) {
                                return _react2.default.createElement("line", {
                                    x1: center,
                                    y1: center,
                                    x2: center,
                                    y2: center,
                                    ref: function ref(el) {
                                        return _this2.targets[i][j] = el;
                                    },
                                    key: j,
                                    strokeWidth: lineStrokeWidth,
                                    stroke: color });
                            })
                        );
                    })
                ),
                _react2.default.createElement("circle", {
                    cx: center,
                    cy: center,
                    r: 0,
                    strokeWidth: circleStrokeWidth,
                    stroke: color,
                    fill: "none",
                    ref: function ref(el) {
                        return _this2.circle = el;
                    }
                })
            );
        }
    }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(_ref3, prevState) {
            var size = _ref3.size,
                delay = _ref3.delay,
                repeatDelay = _ref3.repeatDelay,
                repeat = _ref3.repeat;

            if (size !== prevState.size || delay !== prevState.delay || repeatDelay !== prevState.repeatDelay || repeat !== prevState.repeat) return { size: size, delay: delay, repeatDelay: repeatDelay, repeat: repeat };

            return null;
        }
    }]);

    return Explosion;
}(_react.Component);

exports.default = Explosion;
