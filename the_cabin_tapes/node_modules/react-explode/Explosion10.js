"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _gsap = require("gsap");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Explosion = function (_Component) {
    _inherits(Explosion, _Component);

    function Explosion() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Explosion);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Explosion.__proto__ || Object.getPrototypeOf(Explosion)).call.apply(_ref, [this].concat(args))), _this), _this.size = _this.props.size, _this.center = _this.size / 2, _this.zigzags = [], _this.crosses = [], _this.circles = [], _this.radiuses = [47.5, 25], _this.crossSize = 20, _this.zigzagWidth = 10, _this.zigzagHight = 20, _this.strokeWidth = 1, _this.shapes = { zigzag: null, cross: null }, _this.drawZigzag = function () {
            var center = _this.center;
            var zigzags = 7;
            var width = _this.size * _this.zigzagWidth / 100;
            var halfWidth = width / 2;
            var height = _this.size * _this.zigzagHight / 100;
            var halfHeight = height / 2;
            var step = height / (zigzags - 1);

            var data = [];

            for (var i = 0; i < zigzags; i++) {
                i == 0 && data.push({ type: "M", points: [center + halfWidth, center - halfHeight] });
                i > 0 && data.push({ type: "L", points: [center + (i % 2 ? -1 : 1) * halfWidth, center + i * step - halfHeight] });
            }

            var zigzag = _this.createPathData(data);

            return zigzag;
        }, _this.drawCross = function () {
            var center = _this.center;
            var crossSize = _this.size * _this.crossSize / 100;
            var half = crossSize / 2;

            var cross = "\n            M " + (center - half) + " " + center + "\n            L " + (center + half) + " " + center + "\n            M " + center + " " + (center - half) + "\n            L " + center + " " + (center + half) + "\n        ";

            return cross;
        }, _this.createPathData = function (data) {
            return data.reduce(function (string, _ref2) {
                var type = _ref2.type,
                    points = _ref2.points;

                return string + ("" + type + points[0] + " " + points[1] + " ");
            }, "");
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Explosion, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this2 = this;

            var ease = _gsap.Power4.easeOut;
            var radiuses = this.radiuses.map(function (radius) {
                return _this2.size * radius / 100;
            });
            var tlgroup1 = [];
            var tlgroup2 = [];

            for (var i = 0; i < 20; i++) {
                var _timeline = new _gsap.TimelineMax();

                var zigzag = this.zigzags[i];
                var cross = this.crosses[i];

                var cos = Math.cos(Math.PI / 10 * i);
                var sin = Math.sin(Math.PI / 10 * i);

                if (i < 12) {
                    var _cos = Math.cos(Math.PI / 6 * i);
                    var _sin = Math.sin(Math.PI / 6 * i);

                    _timeline.to(zigzag, 2, { x: radiuses[0] * _cos, y: radiuses[0] * _sin, ease: ease });
                    _timeline.to(zigzag, 3, { rotation: 360, scale: 0, transformOrigin: "50% 50%", ease: ease }, 0);
                }
                _timeline.to(cross, 2, { x: radiuses[1] * cos, y: radiuses[1] * sin, ease: ease }, 0);
                _timeline.to(cross, 3, { rotation: 360, scale: 0, transformOrigin: "50% 50%", ease: ease }, 0);

                tlgroup1.push(_timeline);
                if (i < 2) {
                    var _timeline2 = new _gsap.TimelineMax({ delay: 0.5 * i });
                    var circle = this.circles[i];

                    _timeline2.to(circle, 2.5, { attr: { r: radiuses[0] }, ease: ease });
                    _timeline2.to(circle, 2, { opacity: 0, ease: ease }, "-=2");

                    tlgroup2.push(_timeline2);
                }
            }

            var _props = this.props,
                _props$repeat = _props.repeat,
                repeat = _props$repeat === undefined ? 0 : _props$repeat,
                _props$repeatDelay = _props.repeatDelay,
                repeatDelay = _props$repeatDelay === undefined ? 0 : _props$repeatDelay,
                _props$delay = _props.delay,
                delay = _props$delay === undefined ? 0 : _props$delay,
                onStart = _props.onStart,
                onComplete = _props.onComplete,
                onRepeat = _props.onRepeat;

            var timeline = new _gsap.TimelineMax({ repeat: repeat, repeatDelay: repeatDelay, delay: delay, onStart: onStart, onComplete: onComplete, onRepeat: onRepeat });

            timeline.add(tlgroup1, 0);
            timeline.add(tlgroup2, 0);
        }
    }, {
        key: "componentWillMount",
        value: function componentWillMount() {
            var zigzag = this.drawZigzag();
            var cross = this.drawCross();

            this.shapes.zigzag = zigzag;
            this.shapes.cross = cross;
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            var _props2 = this.props,
                size = _props2.size,
                style = _props2.style;
            var _shapes = this.shapes,
                zigzag = _shapes.zigzag,
                cross = _shapes.cross;

            var strokeWidth = Math.ceil(this.size * this.strokeWidth / 100);

            return _react2.default.createElement(
                "svg",
                { width: size, height: size, style: style },
                [].concat(_toConsumableArray(Array(20))).map(function (_, i) {
                    return _react2.default.createElement(
                        _react.Fragment,
                        { key: i },
                        i < 12 && _react2.default.createElement("path", {
                            d: zigzag,
                            strokeWidth: strokeWidth,
                            stroke: "rgb(255, 147, 234)",
                            fill: "none",
                            ref: function ref(el) {
                                _this3.zigzags[i] = el;
                            }
                        }),
                        _react2.default.createElement("path", {
                            d: cross,
                            strokeWidth: strokeWidth,
                            stroke: "rgb(1, 204, 245)",
                            fill: "none",
                            ref: function ref(el) {
                                _this3.crosses[i] = el;
                            }
                        }),
                        i < 2 && _react2.default.createElement("circle", {
                            cx: _this3.center,
                            cy: _this3.center,
                            r: "0",
                            fill: "none",
                            stroke: "rgb(255, 208, 3)",
                            strokeWidth: strokeWidth,
                            ref: function ref(el) {
                                return _this3.circles[i] = el;
                            }
                        })
                    );
                })
            );
        }
    }]);

    return Explosion;
}(_react.Component);

exports.default = Explosion;