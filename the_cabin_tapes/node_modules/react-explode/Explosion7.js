"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _gsap = require("gsap");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Explosion = function (_Component) {
    _inherits(Explosion, _Component);

    function Explosion() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Explosion);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Explosion.__proto__ || Object.getPrototypeOf(Explosion)).call.apply(_ref, [this].concat(args))), _this), _this.state = { size: 400, delay: 0, repeatDelay: 0, repeat: 0 }, _this.paths = [], _this.degree = 90 * Math.PI / 180, _this.initExplosion = 4, _this.gap = 7, _this.strokeWidth = 0.5, _this.timeline = null, _this.explode = function () {
            var size = _this.state.size;
            var center = size / 2;
            var ease = _gsap.Circ.easeInOut;
            var offset = _this.initExplosion * 2;
            var _this$props = _this.props,
                delay = _this$props.delay,
                repeat = _this$props.repeat,
                repeatDelay = _this$props.repeatDelay,
                onStart = _this$props.onStart,
                onComplete = _this$props.onComplete,
                onRepeat = _this$props.onRepeat;

            var timelines = [];

            for (var i = 0; i < _this.paths.length; i++) {
                var path = _this.paths[i];
                var j = Math.floor((i - offset) / _this.initExplosion + 1);
                var length = center - (i >= offset ? center * (j / 15) : 0);
                var degree = (i < _this.initExplosion ? 0 : _this.degree / 2) + _this.degree * i;
                var xPercent = Math.cos(degree);
                var yPercent = Math.sin(degree);
                var xOffset = (i < _this.initExplosion ? _this.gap : 0) * Math.cos(_this.degree * i);
                var yOffset = (i < _this.initExplosion ? _this.gap : 0) * Math.sin(_this.degree * i);
                var X = center + length * xPercent;
                var Y = center + length * yPercent;
                var timeline = new _gsap.TimelineMax({ delay: i < _this.initExplosion ? 0 : 0.2 });

                timeline.fromTo(path, 0.7, { attr: { x2: center, y2: center }, ease: ease }, { attr: { x2: X, y2: Y }, ease: ease });
                timeline.fromTo(path, 0.7, { attr: { x1: center + xOffset, y1: center + yOffset }, ease: ease }, { attr: { x1: X, y1: Y }, ease: ease }, "-=0.5");

                if (i >= offset) {
                    var transformOrigin = (xPercent >= 0 ? 0 : 100) + "% " + (yPercent >= 0 ? 0 : 100) + "%";

                    timeline.fromTo(path, 0.5, { rotation: 0 }, { rotation: 90 * (j / 10), transformOrigin: transformOrigin, ease: ease }, "-=0.7");
                }

                timelines.push(timeline);
            }

            _this.timeline = new _gsap.TimelineMax({ delay: delay, repeat: repeat, repeatDelay: repeatDelay, onStart: onStart, onComplete: onComplete, onRepeat: onRepeat });
            _this.timeline.add(timelines);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Explosion, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(_ref2) {
            var size = _ref2.size,
                delay = _ref2.delay,
                repeatDelay = _ref2.repeatDelay,
                repeat = _ref2.repeat;

            var state = this.state;

            return size !== state.size || delay !== state.delay || repeatDelay !== state.repeatDelay || repeat !== state.repeat;
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            this.explode();
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            this.timeline.kill();
            this.explode();
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var size = this.state.size;
            var _props = this.props,
                _props$color = _props.color,
                color = _props$color === undefined ? "white" : _props$color,
                style = _props.style;

            var center = size / 2;

            return _react2.default.createElement(
                "svg",
                { width: size, height: size, style: style },
                [].concat(_toConsumableArray(Array(64))).map(function (_, i) {
                    return _react2.default.createElement("line", {
                        key: i,
                        x1: center + (i < _this2.initExplosion ? _this2.gap : 0) * Math.cos(_this2.degree * i),
                        y1: center + (i < _this2.initExplosion ? _this2.gap : 0) * Math.sin(_this2.degree * i),
                        x2: center,
                        y2: center,
                        stroke: color,
                        strokeWidth: Math.ceil(size * _this2.strokeWidth / 100),
                        ref: function ref(el) {
                            return _this2.paths[i] = el;
                        }
                    });
                })
            );
        }
    }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(_ref3, prevState) {
            var size = _ref3.size,
                delay = _ref3.delay,
                repeatDelay = _ref3.repeatDelay,
                repeat = _ref3.repeat;

            if (size !== prevState.size || delay !== prevState.delay || repeatDelay !== prevState.repeatDelay || repeat !== prevState.repeat) return { size: size, delay: delay, repeatDelay: repeatDelay, repeat: repeat };

            return null;
        }
    }]);

    return Explosion;
}(_react.Component);

exports.default = Explosion;
