"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _gsap = require("gsap");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Explosion = function (_Component) {
    _inherits(Explosion, _Component);

    function Explosion() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Explosion);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Explosion.__proto__ || Object.getPrototypeOf(Explosion)).call.apply(_ref, [this].concat(args))), _this), _this.state = { size: 400, delay: 0, repeatDelay: 0, repeat: 0 }, _this.size = _this.props.size, _this.timeline = null, _this.lines = [], _this.count = 16, _this.radius = 47.5, _this.strokeWidth = 0.5, _this.durations = [0.6, 1], _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Explosion, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            this.explode();
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            this.timeline.kill();
            this.explode();
        }
    }, {
        key: "explode",
        value: function explode() {
            var _state = this.state,
                size = _state.size,
                repeat = _state.repeat,
                delay = _state.delay,
                repeatDelay = _state.repeatDelay;

            var ease = _gsap.Power4.easeOut;
            var angle = Math.PI / 8;
            var radius = size * this.radius / 100;
            var durations = this.durations;
            var _props = this.props,
                onComplete = _props.onComplete,
                onStart = _props.onStart,
                onRepeat = _props.onRepeat;

            var center = size / 2;
            var timelines = [];

            this.timeline = new _gsap.TimelineMax({
                repeat: repeat, delay: delay, repeatDelay: repeatDelay, onComplete: onComplete, onStart: onStart, onRepeat: onRepeat
            });

            for (var i = 0; i < this.count; i++) {
                var x = center + radius * Math.cos(i * angle);
                var y = center + radius * Math.sin(i * angle);
                var target = this.lines[i];
                var start = { x2: x, y2: y };
                var end = { x1: x, y1: y };

                var timeline = new _gsap.TimelineMax();

                timeline.fromTo(target, durations[0], { attr: { x2: center, y2: center } }, { attr: start, ease: ease }).fromTo(target, durations[1], { attr: { x1: center, y1: center } }, { attr: end, ease: ease }, "-=" + durations[0]);

                timelines.push(timeline);
            }

            this.timeline.add(timelines);
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var size = this.state.size;
            var _props2 = this.props,
                _props2$color = _props2.color,
                color = _props2$color === undefined ? "white" : _props2$color,
                style = _props2.style;

            var center = size / 2;
            var strokeWidth = Math.ceil(size * this.strokeWidth / 100);

            return _react2.default.createElement(
                "svg",
                { width: size, height: size, style: style },
                _react2.default.createElement(
                    _react.Fragment,
                    null,
                    [].concat(_toConsumableArray(Array(this.count))).map(function (_, i) {
                        return _react2.default.createElement("line", {
                            x1: center,
                            y1: center,
                            x2: center,
                            y2: center,
                            ref: function ref(el) {
                                return _this2.lines[i] = el;
                            },
                            key: i,
                            strokeWidth: strokeWidth,
                            stroke: color
                        });
                    })
                )
            );
        }
    }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(_ref2, prevState) {
            var size = _ref2.size,
                delay = _ref2.delay,
                repeatDelay = _ref2.repeatDelay,
                repeat = _ref2.repeat;

            if (size !== prevState.size || delay !== prevState.delay || repeatDelay !== prevState.repeatDelay || repeat !== prevState.repeat) return { size: size, delay: delay, repeatDelay: repeatDelay, repeat: repeat };

            return null;
        }
    }]);

    return Explosion;
}(_react.Component);

exports.default = Explosion;
